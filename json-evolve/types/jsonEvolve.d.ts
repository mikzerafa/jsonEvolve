declare const print: (json: any) => void;
declare const meta: (json: any) => void;
declare const assert: {
    KeyContainsData: (json: string, key: string) => void;
    KeyWithAncestorContainsData: (json: string, key: string, ancestor: string) => void;
    KeyWithAncestorExists: (json: string, key: string, ancestor: string) => void;
    KeyExists: (json: string, key: string) => void;
    SubsetEquals: (json: string, key: string, contains: string) => void;
    SubsetContains: (json: string, key: string, contains: string) => void;
    SubsetWithParentEquals: (json: string, key: string, parentKey: string, contains: string) => void;
    SubsetWithParentContains: (json: string, key: string, parentKey: string, contains: string) => void;
    SubsetWithAncestorEquals: (json: string, key: string, ancestorKey: string, contains: string) => void;
    SubsetWithAncestorContains: (json: string, key: string, ancestorKey: string, contains: string) => void;
    SubsetOfArrayAtIndexEquals: (json: string, key: string, index: number, contains: string) => void;
    SubsetOfArrayAtIndexContains: (json: string, key: string, index: number, contains: string) => void;
    SubsetOfArrayAtIndexWithParentEquals: (json: string, key: string, index: number, parentKey: string, contains: string) => void;
    SubsetOfArrayAtIndexWithParentContains: (json: string, key: string, index: number, parentKey: string, contains: string) => void;
    SubsetOfArrayAtIndexWithAncestorEquals: (json: string, key: string, index: number, ancestorKey: string, contains: string) => void;
    SubsetOfArrayAtIndexWithAncestorContains: (json: string, key: string, index: number, ancestorKey: string, contains: string) => void;
    SubsetOfArrayAtIndexWithParentIndexEquals: (json: string, key: string, parentIndex: number, index: number, contains: string) => void;
    SubsetOfArrayAtIndexWithParentIndexContains: (json: string, key: string, parentIndex: number, index: number, contains: string) => void;
};
declare const assertObject: {
    Print: (json: object) => void;
    PrintMeta: (json: object) => void;
    KeyContainsData: (json: object, key: string) => void;
    KeyExists: (json: object, key: string) => void;
    KeyWithAncestorContainsData: (json: object, key: string, ancestor: string) => void;
    KeyWithAncestorExists: (json: object, key: string, ancestor: string) => void;
    SubsetEquals: (json: object, key: string, contains: string) => void;
    SubsetContains: (json: object, key: string, contains: string) => void;
    SubsetWithParentEquals: (json: object, key: string, parentKey: string, contains: string) => void;
    SubsetWithParentContains: (json: object, key: string, parentKey: string, contains: string) => void;
    SubsetWithAncestorEquals: (json: object, key: string, ancestorKey: string, contains: string) => void;
    SubsetWithAncestorContains: (json: object, key: string, ancestorKey: string, contains: string) => void;
    SubsetOfArrayAtIndexEquals: (json: object, key: string, index: number, contains: string) => void;
    SubsetOfArrayAtIndexContains: (json: object, key: string, index: number, contains: string) => void;
    SubsetOfArrayAtIndexWithParentEquals: (json: object, key: string, index: number, parentKey: string, contains: string) => void;
    SubsetOfArrayAtIndexWithParentContains: (json: object, key: string, index: number, parentKey: string, contains: string) => void;
    SubsetOfArrayAtIndexWithAncestorEquals: (json: object, key: string, index: number, ancestorKey: string, contains: string) => void;
    SubsetOfArrayAtIndexWithAncestorContains: (json: object, key: string, index: number, ancestorKey: string, contains: string) => void;
    SubsetOfArrayAtIndexWithParentIndexEquals: (json: object, key: string, parentIndex: number, index: number, contains: string) => void;
    SubsetOfArrayAtIndexWithParentIndexContains: (json: object, key: string, parentIndex: number, index: number, contains: string) => void;
};
declare const get: {
    value: (json: string, key: string) => string;
    valueWithParent: (json: string, key: string, parentKey: string) => string;
    valueWithAncestor: (json: string, key: string, ancestorKey: string) => string;
    values: (json: string, key: string) => Map<number, string>;
    valueAtIndex: (json: string, key: string, index: number) => string;
    valueAtIndexWithParentIndex: (json: string, key: string, parentIndex: number, index: number) => string;
    keysAmount: (json: string) => number;
    keyAtIndex: (json: string, index: number) => string;
    keys: (json: string) => string[];
};
declare const getObject: {
    value: (json: object, key: string) => string;
    valueWithParent: (json: object, key: string, parentKey: string) => string;
    valueWithAncestor: (json: object, key: string, ancestorKey: string) => string;
    values: (json: object, key: string) => Map<number, string>;
    valueAtIndex: (json: object, key: string, index: number) => string;
    valueAtIndexWithParentIndex: (json: object, key: string, parentIndex: number, index: number) => string;
    keysAmount: (json: object) => number;
    keyAtIndex: (json: object, index: number) => string;
    keys: (json: object) => string[];
};
export { print, assert, get, assertObject, getObject, meta };
//# sourceMappingURL=jsonEvolve.d.ts.map